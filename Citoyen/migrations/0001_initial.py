# Generated by Django 5.2 on 2025-04-09 23:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nom')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
            },
        ),
        migrations.CreateModel(
            name='Citizen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='Nom complet')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Téléphone')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Adresse')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
            ],
            options={
                'verbose_name': 'Citoyen',
                'verbose_name_plural': 'Citoyens',
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nom')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('boundary', models.TextField(blank=True, null=True, verbose_name='Limites géographiques')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
            ],
            options={
                'verbose_name': 'Municipalité',
                'verbose_name_plural': 'Municipalités',
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=255, verbose_name='Sujet')),
                ('description', models.TextField(verbose_name='Description')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('REVIEWING', 'En examen'), ('RESOLVED', 'Résolu'), ('REJECTED', 'Rejeté')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to='Citoyen.citizen')),
                ('municipality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to='Citoyen.municipality')),
            ],
            options={
                'verbose_name': 'Réclamation',
                'verbose_name_plural': 'Réclamations',
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(verbose_name='Description')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='problem_photos/', verbose_name='Photo')),
                ('location', models.CharField(blank=True, max_length=255, null=True, verbose_name='Adresse')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('IN_PROGRESS', 'En cours'), ('DELEGATED', 'Délégué'), ('RESOLVED', 'Résolu'), ('REJECTED', 'Rejeté')], default='PENDING', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='Citoyen.category')),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='Citoyen.citizen')),
                ('municipality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='Citoyen.municipality')),
            ],
            options={
                'verbose_name': 'Problème',
                'verbose_name_plural': 'Problèmes',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('CITIZEN', 'Citoyen'), ('ADMIN', 'Administrateur'), ('SUPERADMIN', 'Superadministrateur')], default='CITIZEN', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StatusLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_type', models.CharField(choices=[('PROBLEM', 'Problème'), ('COMPLAINT', 'Réclamation')], max_length=10, verbose_name="Type d'enregistrement")),
                ('record_id', models.UUIDField(verbose_name="ID d'enregistrement")),
                ('old_status', models.CharField(max_length=20, verbose_name='Ancien statut')),
                ('new_status', models.CharField(max_length=20, verbose_name='Nouveau statut')),
                ('changed_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Modifié le')),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_changes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Journal de statut',
                'verbose_name_plural': 'Journaux de statut',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50, verbose_name='Type')),
                ('data', models.JSONField(verbose_name='Données')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lu le')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.AddField(
            model_name='citizen',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='citizen_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Titre')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('municipality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='administrators', to='Citoyen.municipality')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Administrateur',
                'verbose_name_plural': 'Administrateurs',
            },
        ),
    ]
